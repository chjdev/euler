# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

# bit too slow

import itertools
import math

N = 500


def triangulars():
    triangular = 0
    for i in itertools.count(1):
        triangular += i
        print("next triangular", triangular)
        yield triangular


def enum_divisors(num):
    divisor = 1
    while divisor <= math.sqrt(num):
        if num % divisor == 0:
            yield divisor
            yield num / divisor
        divisor += 1
    yield num



over_500 = filter(lambda triangular: len(list(enum_divisors(triangular))) >= N, triangulars())
print(next(over_500))
